{"version":3,"sources":["components/FriendItem/FriendItem.js","components/Pagination/Pagination.js","components/FriendsList/FriendsList.js","App.js","reportWebVitals.js","index.js"],"names":["FriendItem","React","memo","name","removeFriend","markFavourite","isFavourite","className","type","onClick","class","prevProps","nextProps","Pagination","props","goToNextPage","goToPreviousPage","currentPage","totalPages","changePage","startPage","endPage","Array","keys","map","i","getPageNumbers","item","index","FriendsList","useState","friendsList","setFriendsList","searchResult","setSearchResult","inputValue","setInputValue","Math","ceil","length","setCurrentPage","friendName","prevList","filter","friend","updatedFriendsList","console","log","useEffect","onKeyPress","e","key","onChange","target","value","placeholder","maxLength","searchRes","sortedList","push","Object","startIndex","endIndex","slice","getPageData","page","event","pageNumber","Number","textContent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.84e0ce9b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./FriendItem.css\";\nconst FriendItem = React.memo(\n  ({ name, removeFriend, markFavourite, isFavourite }) => {\n    return (\n      <>\n        <div className='row friend-row col-md-12'>\n          <div className='col-md-6'>\n            {name}\n            <br />\n            <span className='subscript'>is your friend</span>\n          </div>\n          <div className='col-md-6 buttonDiv'>\n            <button\n              type='button'\n              className='btn btn-sm'\n              onClick={() => markFavourite(name)}\n            >\n              {!isFavourite && <i className='far fa-star'></i>}\n              {isFavourite && <i className='fas fa-star'></i>}\n            </button>\n            <button\n              type='button'\n              className='btn btn-sm'\n              onClick={() => removeFriend(name)}\n            >\n              <i class='far fa-trash-alt'></i>\n            </button>\n          </div>\n        </div>\n      </>\n    );\n  },\n  (prevProps, nextProps) =>\n    prevProps.name === nextProps.name &&\n    prevProps.isFavourite === nextProps.isFavourite\n);\nexport default FriendItem;\n","import React from \"react\";\nimport \"./Pagination.css\";\n\nfunction Pagination(props) {\n  const {\n    goToNextPage,\n    goToPreviousPage,\n    currentPage,\n    totalPages,\n    changePage,\n  } = props;\n  const getPageNumbers = () => {\n    let startPage, endPage;\n    if (totalPages <= 4) {\n      startPage = 1;\n      endPage = totalPages;\n    } else {\n      if (currentPage <= 3) {\n        startPage = 1;\n        endPage = 4;\n      } else if (currentPage + 1 >= totalPages) {\n        startPage = totalPages - 3;\n        endPage = totalPages;\n      } else {\n        startPage = currentPage - 2;\n        endPage = currentPage + 1;\n      }\n    }\n    let pages = [...Array(endPage + 1 - startPage).keys()].map(\n      (i) => startPage + i\n    );\n    return pages;\n  };\n  return (\n    <div className='col-md-6 pagination-div'>\n      <button\n        onClick={goToPreviousPage}\n        className={`prev ${\n          currentPage === 1 || totalPages === 0 ? \"disabled\" : \"\"\n        }`}\n      >\n        <i class='fas fa-backward'></i>\n      </button>\n      {getPageNumbers().map((item, index) => (\n        <button\n          key={index}\n          onClick={changePage}\n          className={`paginationItem ${\n            currentPage === item ? \"active\" : \"disabled\"\n          }`}\n        >\n          <span>{item}</span>\n        </button>\n      ))}\n      <button\n        onClick={goToNextPage}\n        className={`next ${\n          currentPage === totalPages || totalPages === 0 ? \"disabled\" : \"\"\n        }`}\n      >\n        <i class='fas fa-forward'></i>\n      </button>\n    </div>\n  );\n}\n\nexport default Pagination;\n","import React, { useState, useEffect } from \"react\";\nimport FriendItem from \"../FriendItem/FriendItem\";\nimport \"./FriendsList.css\";\nimport Pagination from \"../Pagination/Pagination\";\n\nexport default function FriendsList(props) {\n  let [friendsList, setFriendsList] = useState([]);\n  const [searchResult, setSearchResult] = useState({});\n  let [inputValue, setInputValue] = useState(\"\");\n  const friendsPerPage = 4;\n  const totalPages = Math.ceil(friendsList.length / friendsPerPage);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  function inputChangeHandler(e) {\n    setInputValue(e.target.value);\n  }\n  function addFriend(e) {\n    if (e.key === \"Enter\" && inputValue !== \"\") {\n      setFriendsList((prevList) => [\n        ...prevList,\n        { name: inputValue, isFavourite: false },\n      ]);\n    }\n  }\n\n  function removeFriend(friendName) {\n    setFriendsList((prevList) =>\n      prevList.filter((friend) => friend.name !== friendName)\n    );\n  }\n\n  function markFavourite(friendName) {\n    setFriendsList((prevList) => {\n      const updatedFriendsList = [...prevList];\n      for (let i = 0; i < updatedFriendsList.length; i++) {\n        if (updatedFriendsList[i].name === friendName) {\n          updatedFriendsList[i].isFavourite = !updatedFriendsList[i]\n            .isFavourite;\n          break;\n        }\n      }\n      console.log(updatedFriendsList);\n      return updatedFriendsList;\n    });\n  }\n  function goToNextPage() {\n    setCurrentPage((page) => page + 1);\n  }\n  function goToPreviousPage() {\n    setCurrentPage((page) => page - 1);\n  }\n\n  const getPageData = () => {\n    const startIndex = friendsPerPage * (currentPage - 1);\n    const endIndex = startIndex + friendsPerPage;\n    return friendsList.slice(startIndex, endIndex);\n  };\n  function changePage(event) {\n    const pageNumber = Number(event.target.textContent);\n    setCurrentPage(pageNumber);\n  }\n\n  function searchFriend() {\n    let searchRes = {};\n    for (let i = 0; i < friendsList.length; i++) {\n      if (friendsList[i].name === inputValue) {\n        searchRes = friendsList[i];\n        break;\n      }\n    }\n    setSearchResult(searchRes);\n  }\n\n  function sortRatings() {\n    setFriendsList((prevList) => {\n      let sortedList = [];\n      for (let i = 0; i < prevList.length; i++) {\n        if (prevList[i].isFavourite) {\n          sortedList.push(prevList[i]);\n        }\n      }\n      for (let i = 0; i < prevList.length; i++) {\n        if (!prevList[i].isFavourite) {\n          sortedList.push(prevList[i]);\n        }\n      }\n      return sortedList;\n    });\n  }\n\n  useEffect(() => {\n    setInputValue(\"\");\n    setSearchResult({});\n  }, [friendsList.length]);\n\n  useEffect(() => {\n    setCurrentPage(totalPages);\n  }, [totalPages]);\n\n  return (\n    <>\n      <div className='col-md-4 col-sm-6 mainDiv'>\n        <div className='col-md-12 col-sm-12 head-div'>Friends List</div>\n        <div className='controls-div'>\n          <input\n            className='col-md-10 col-sm-8'\n            onKeyPress={addFriend}\n            onChange={inputChangeHandler}\n            value={inputValue}\n            placeholder=\"Enter your friend's name\"\n            maxLength='40'\n          />\n          <button\n            onClick={searchFriend}\n            className='btn-search col-md-1 col-sm-2'\n          >\n            <i class='fas fa-search'></i>\n          </button>\n          <button className='btn-sort col-md-1 col-sm-2' onClick={sortRatings}>\n            <i class='fas fa-sort'></i>\n          </button>\n        </div>\n        {Object.keys(searchResult).length === 0 && (\n          <div>\n            {getPageData().map((friend) => {\n              return (\n                <FriendItem\n                  key={friend.name}\n                  name={friend.name}\n                  removeFriend={removeFriend}\n                  markFavourite={markFavourite}\n                  isFavourite={friend.isFavourite}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Object.keys(searchResult).length > 0 && (\n          <div>\n            <FriendItem\n              name={searchResult.name}\n              removeFriend={removeFriend}\n              markFavourite={markFavourite}\n              isFavourite={searchResult.isFavourite}\n            />\n          </div>\n        )}\n      </div>\n      <Pagination\n        goToNextPage={goToNextPage}\n        goToPreviousPage={goToPreviousPage}\n        totalPages={totalPages}\n        currentPage={currentPage}\n        changePage={changePage}\n      />\n    </>\n  );\n}\n","import \"./App.css\";\nimport FriendsList from \"./components/FriendsList/FriendsList\";\n\nfunction App() {\n  return (\n    <div className='App'>\n      <FriendsList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <>\n    <App />\n  </>,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}